//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\dev\cql\src\grammar/fhirpath.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class fhirpathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		DATETIME=53, TIME=54, IDENTIFIER=55, QUOTEDIDENTIFIER=56, STRING=57, NUMBER=58, 
		WS=59, COMMENT=60, LINE_COMMENT=61;
	public const int
		RULE_expression = 0, RULE_term = 1, RULE_literal = 2, RULE_externalConstant = 3, 
		RULE_invocation = 4, RULE_function = 5, RULE_paramList = 6, RULE_quantity = 7, 
		RULE_unit = 8, RULE_dateTimePrecision = 9, RULE_pluralDateTimePrecision = 10, 
		RULE_typeSpecifier = 11, RULE_qualifiedIdentifier = 12, RULE_identifier = 13;
	public static readonly string[] ruleNames = {
		"expression", "term", "literal", "externalConstant", "invocation", "function", 
		"paramList", "quantity", "unit", "dateTimePrecision", "pluralDateTimePrecision", 
		"typeSpecifier", "qualifiedIdentifier", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.'", "'['", "']'", "'+'", "'-'", "'*'", "'/'", "'div'", "'mod'", 
		"'&'", "'|'", "'<='", "'<'", "'>'", "'>='", "'is'", "'as'", "'='", "'~'", 
		"'!='", "'!~'", "'in'", "'contains'", "'and'", "'or'", "'xor'", "'implies'", 
		"'('", "')'", "'{'", "'}'", "'true'", "'false'", "'%'", "'$this'", "','", 
		"'year'", "'month'", "'week'", "'day'", "'hour'", "'minute'", "'second'", 
		"'millisecond'", "'years'", "'months'", "'weeks'", "'days'", "'hours'", 
		"'minutes'", "'seconds'", "'milliseconds'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "DATETIME", "TIME", "IDENTIFIER", "QUOTEDIDENTIFIER", 
		"STRING", "NUMBER", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "fhirpath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static fhirpathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public fhirpathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public fhirpathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IndexerExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IndexerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterIndexerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitIndexerExpression(this);
		}
	}
	public partial class PolarityExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PolarityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterPolarityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitPolarityExpression(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}
	public partial class UnionExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public UnionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterUnionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitUnionExpression(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}
	public partial class MembershipExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MembershipExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterMembershipExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitMembershipExpression(this);
		}
	}
	public partial class InequalityExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public InequalityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterInequalityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitInequalityExpression(this);
		}
	}
	public partial class InvocationExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public InvocationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterInvocationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitInvocationExpression(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
	}
	public partial class ImpliesExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ImpliesExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterImpliesExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitImpliesExpression(this);
		}
	}
	public partial class TermExpressionContext : ExpressionContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public TermExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterTermExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitTermExpression(this);
		}
	}
	public partial class TypeExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public TypeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitTypeExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
			case T__16:
			case T__27:
			case T__29:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case DATETIME:
			case TIME:
			case IDENTIFIER:
			case QUOTEDIDENTIFIER:
			case STRING:
			case NUMBER:
				{
				_localctx = new TermExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 29; term();
				}
				break;
			case T__3:
			case T__4:
				{
				_localctx = new PolarityExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 30;
				_la = TokenStream.LA(1);
				if ( !(_la==T__3 || _la==T__4) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 31; expression(11);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 74;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 72;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 34;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 35;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 36; expression(11);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 37;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 38;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__9))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 39; expression(10);
						}
						break;
					case 3:
						{
						_localctx = new UnionExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 40;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 41; Match(T__10);
						State = 42; expression(9);
						}
						break;
					case 4:
						{
						_localctx = new InequalityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 43;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 44;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 45; expression(8);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 46;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 47;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 48; expression(6);
						}
						break;
					case 6:
						{
						_localctx = new MembershipExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 49;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 50;
						_la = TokenStream.LA(1);
						if ( !(_la==T__21 || _la==T__22) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 51; expression(5);
						}
						break;
					case 7:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 52;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 53; Match(T__23);
						State = 54; expression(4);
						}
						break;
					case 8:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 55;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 56;
						_la = TokenStream.LA(1);
						if ( !(_la==T__24 || _la==T__25) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 57; expression(3);
						}
						break;
					case 9:
						{
						_localctx = new ImpliesExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 58;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 59; Match(T__26);
						State = 60; expression(2);
						}
						break;
					case 10:
						{
						_localctx = new InvocationExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 61;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 62; Match(T__0);
						State = 63; invocation();
						}
						break;
					case 11:
						{
						_localctx = new IndexerExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 64;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 65; Match(T__1);
						State = 66; expression(0);
						State = 67; Match(T__2);
						}
						break;
					case 12:
						{
						_localctx = new TypeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 69;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 70;
						_la = TokenStream.LA(1);
						if ( !(_la==T__15 || _la==T__16) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 71; typeSpecifier();
						}
						break;
					}
					} 
				}
				State = 76;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExternalConstantTermContext : TermContext {
		public ExternalConstantContext externalConstant() {
			return GetRuleContext<ExternalConstantContext>(0);
		}
		public ExternalConstantTermContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterExternalConstantTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitExternalConstantTerm(this);
		}
	}
	public partial class LiteralTermContext : TermContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralTermContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterLiteralTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitLiteralTerm(this);
		}
	}
	public partial class ParenthesizedTermContext : TermContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedTermContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterParenthesizedTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitParenthesizedTerm(this);
		}
	}
	public partial class InvocationTermContext : TermContext {
		public InvocationContext invocation() {
			return GetRuleContext<InvocationContext>(0);
		}
		public InvocationTermContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterInvocationTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitInvocationTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 2, RULE_term);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
			case T__16:
			case T__34:
			case IDENTIFIER:
			case QUOTEDIDENTIFIER:
				_localctx = new InvocationTermContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; invocation();
				}
				break;
			case T__29:
			case T__31:
			case T__32:
			case DATETIME:
			case TIME:
			case STRING:
			case NUMBER:
				_localctx = new LiteralTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 78; literal();
				}
				break;
			case T__33:
				_localctx = new ExternalConstantTermContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 79; externalConstant();
				}
				break;
			case T__27:
				_localctx = new ParenthesizedTermContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 80; Match(T__27);
				State = 81; expression(0);
				State = 82; Match(T__28);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TimeLiteralContext : LiteralContext {
		public ITerminalNode TIME() { return GetToken(fhirpathParser.TIME, 0); }
		public TimeLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitTimeLiteral(this);
		}
	}
	public partial class NullLiteralContext : LiteralContext {
		public NullLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
	}
	public partial class DateTimeLiteralContext : LiteralContext {
		public ITerminalNode DATETIME() { return GetToken(fhirpathParser.DATETIME, 0); }
		public DateTimeLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterDateTimeLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitDateTimeLiteral(this);
		}
	}
	public partial class StringLiteralContext : LiteralContext {
		public ITerminalNode STRING() { return GetToken(fhirpathParser.STRING, 0); }
		public StringLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
	}
	public partial class BooleanLiteralContext : LiteralContext {
		public BooleanLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
	}
	public partial class NumberLiteralContext : LiteralContext {
		public ITerminalNode NUMBER() { return GetToken(fhirpathParser.NUMBER, 0); }
		public NumberLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
	}
	public partial class QuantityLiteralContext : LiteralContext {
		public QuantityContext quantity() {
			return GetRuleContext<QuantityContext>(0);
		}
		public QuantityLiteralContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterQuantityLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitQuantityLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 4, RULE_literal);
		int _la;
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new NullLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; Match(T__29);
				State = 87; Match(T__30);
				}
				break;
			case 2:
				_localctx = new BooleanLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				_la = TokenStream.LA(1);
				if ( !(_la==T__31 || _la==T__32) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				_localctx = new StringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 89; Match(STRING);
				}
				break;
			case 4:
				_localctx = new NumberLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 90; Match(NUMBER);
				}
				break;
			case 5:
				_localctx = new DateTimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 91; Match(DATETIME);
				}
				break;
			case 6:
				_localctx = new TimeLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 92; Match(TIME);
				}
				break;
			case 7:
				_localctx = new QuantityLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 93; quantity();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalConstantContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExternalConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterExternalConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitExternalConstant(this);
		}
	}

	[RuleVersion(0)]
	public ExternalConstantContext externalConstant() {
		ExternalConstantContext _localctx = new ExternalConstantContext(Context, State);
		EnterRule(_localctx, 6, RULE_externalConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; Match(T__33);
			State = 97; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvocationContext : ParserRuleContext {
		public InvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation; } }
	 
		public InvocationContext() { }
		public virtual void CopyFrom(InvocationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ThisInvocationContext : InvocationContext {
		public ThisInvocationContext(InvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterThisInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitThisInvocation(this);
		}
	}
	public partial class FunctionInvocationContext : InvocationContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FunctionInvocationContext(InvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterFunctionInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitFunctionInvocation(this);
		}
	}
	public partial class MemberInvocationContext : InvocationContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberInvocationContext(InvocationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterMemberInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitMemberInvocation(this);
		}
	}

	[RuleVersion(0)]
	public InvocationContext invocation() {
		InvocationContext _localctx = new InvocationContext(Context, State);
		EnterRule(_localctx, 8, RULE_invocation);
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new MemberInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; identifier();
				}
				break;
			case 2:
				_localctx = new FunctionInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 100; function();
				}
				break;
			case 3:
				_localctx = new ThisInvocationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 101; Match(T__34);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 10, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; identifier();
			State = 105; Match(T__27);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__15) | (1L << T__16) | (1L << T__27) | (1L << T__29) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << DATETIME) | (1L << TIME) | (1L << IDENTIFIER) | (1L << QUOTEDIDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				State = 106; paramList();
				}
			}

			State = 109; Match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 12, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; expression(0);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__35) {
				{
				{
				State = 112; Match(T__35);
				State = 113; expression(0);
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuantityContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(fhirpathParser.NUMBER, 0); }
		public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		public QuantityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterQuantity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitQuantity(this);
		}
	}

	[RuleVersion(0)]
	public QuantityContext quantity() {
		QuantityContext _localctx = new QuantityContext(Context, State);
		EnterRule(_localctx, 14, RULE_quantity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(NUMBER);
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 120; unit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitContext : ParserRuleContext {
		public DateTimePrecisionContext dateTimePrecision() {
			return GetRuleContext<DateTimePrecisionContext>(0);
		}
		public PluralDateTimePrecisionContext pluralDateTimePrecision() {
			return GetRuleContext<PluralDateTimePrecisionContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(fhirpathParser.STRING, 0); }
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 16, RULE_unit);
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; dateTimePrecision();
				}
				break;
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124; pluralDateTimePrecision();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 125; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimePrecisionContext : ParserRuleContext {
		public DateTimePrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimePrecision; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterDateTimePrecision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitDateTimePrecision(this);
		}
	}

	[RuleVersion(0)]
	public DateTimePrecisionContext dateTimePrecision() {
		DateTimePrecisionContext _localctx = new DateTimePrecisionContext(Context, State);
		EnterRule(_localctx, 18, RULE_dateTimePrecision);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluralDateTimePrecisionContext : ParserRuleContext {
		public PluralDateTimePrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pluralDateTimePrecision; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterPluralDateTimePrecision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitPluralDateTimePrecision(this);
		}
	}

	[RuleVersion(0)]
	public PluralDateTimePrecisionContext pluralDateTimePrecision() {
		PluralDateTimePrecisionContext _localctx = new PluralDateTimePrecisionContext(Context, State);
		EnterRule(_localctx, 20, RULE_pluralDateTimePrecision);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterQualifiedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitQualifiedIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_qualifiedIdentifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; identifier();
			State = 139;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 135; Match(T__0);
					State = 136; identifier();
					}
					} 
				}
				State = 141;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(fhirpathParser.IDENTIFIER, 0); }
		public ITerminalNode QUOTEDIDENTIFIER() { return GetToken(fhirpathParser.QUOTEDIDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfhirpathListener typedListener = listener as IfhirpathListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__15) | (1L << T__16) | (1L << IDENTIFIER) | (1L << QUOTEDIDENTIFIER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		case 9: return Precpred(Context, 13);
		case 10: return Precpred(Context, 12);
		case 11: return Precpred(Context, 6);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '?', '\x93', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '#', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', 'K', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'N', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'W', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x61', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'i', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', 'n', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'u', '\n', '\b', '\f', 
		'\b', '\xE', '\b', 'x', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'|', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x81', 
		'\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', 
		'\x8C', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x8F', '\v', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x2', '\x3', '\x2', '\x10', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x2', '\xE', '\x3', '\x2', '\x6', '\a', '\x3', 
		'\x2', '\b', '\v', '\x4', '\x2', '\x6', '\a', '\f', '\f', '\x3', '\x2', 
		'\xE', '\x11', '\x3', '\x2', '\x14', '\x17', '\x3', '\x2', '\x18', '\x19', 
		'\x3', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x12', '\x13', '\x3', '\x2', 
		'\"', '#', '\x3', '\x2', '\'', '.', '\x3', '\x2', '/', '\x36', '\x4', 
		'\x2', '\x12', '\x13', '\x39', ':', '\x2', '\xA2', '\x2', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\x4', 'V', '\x3', '\x2', '\x2', '\x2', '\x6', '`', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'h', '\x3', '\x2', '\x2', '\x2', '\f', 'j', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'q', '\x3', '\x2', '\x2', '\x2', '\x10', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x80', '\x3', '\x2', '\x2', '\x2', '\x14', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x84', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x86', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x90', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\b', '\x2', '\x1', '\x2', '\x1F', '#', '\x5', '\x4', '\x3', '\x2', ' ', 
		'!', '\t', '\x2', '\x2', '\x2', '!', '#', '\x5', '\x2', '\x2', '\r', '\"', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', 
		'#', 'L', '\x3', '\x2', '\x2', '\x2', '$', '%', '\f', '\f', '\x2', '\x2', 
		'%', '&', '\t', '\x3', '\x2', '\x2', '&', 'K', '\x5', '\x2', '\x2', '\r', 
		'\'', '(', '\f', '\v', '\x2', '\x2', '(', ')', '\t', '\x4', '\x2', '\x2', 
		')', 'K', '\x5', '\x2', '\x2', '\f', '*', '+', '\f', '\n', '\x2', '\x2', 
		'+', ',', '\a', '\r', '\x2', '\x2', ',', 'K', '\x5', '\x2', '\x2', '\v', 
		'-', '.', '\f', '\t', '\x2', '\x2', '.', '/', '\t', '\x5', '\x2', '\x2', 
		'/', 'K', '\x5', '\x2', '\x2', '\n', '\x30', '\x31', '\f', '\a', '\x2', 
		'\x2', '\x31', '\x32', '\t', '\x6', '\x2', '\x2', '\x32', 'K', '\x5', 
		'\x2', '\x2', '\b', '\x33', '\x34', '\f', '\x6', '\x2', '\x2', '\x34', 
		'\x35', '\t', '\a', '\x2', '\x2', '\x35', 'K', '\x5', '\x2', '\x2', '\a', 
		'\x36', '\x37', '\f', '\x5', '\x2', '\x2', '\x37', '\x38', '\a', '\x1A', 
		'\x2', '\x2', '\x38', 'K', '\x5', '\x2', '\x2', '\x6', '\x39', ':', '\f', 
		'\x4', '\x2', '\x2', ':', ';', '\t', '\b', '\x2', '\x2', ';', 'K', '\x5', 
		'\x2', '\x2', '\x5', '<', '=', '\f', '\x3', '\x2', '\x2', '=', '>', '\a', 
		'\x1D', '\x2', '\x2', '>', 'K', '\x5', '\x2', '\x2', '\x4', '?', '@', 
		'\f', '\xF', '\x2', '\x2', '@', '\x41', '\a', '\x3', '\x2', '\x2', '\x41', 
		'K', '\x5', '\n', '\x6', '\x2', '\x42', '\x43', '\f', '\xE', '\x2', '\x2', 
		'\x43', '\x44', '\a', '\x4', '\x2', '\x2', '\x44', '\x45', '\x5', '\x2', 
		'\x2', '\x2', '\x45', '\x46', '\a', '\x5', '\x2', '\x2', '\x46', 'K', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\f', '\b', '\x2', '\x2', 'H', 'I', 
		'\t', '\t', '\x2', '\x2', 'I', 'K', '\x5', '\x18', '\r', '\x2', 'J', '$', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\'', '\x3', '\x2', '\x2', '\x2', 'J', 
		'*', '\x3', '\x2', '\x2', '\x2', 'J', '-', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x30', '\x3', '\x2', '\x2', '\x2', 'J', '\x33', '\x3', '\x2', '\x2', 
		'\x2', 'J', '\x36', '\x3', '\x2', '\x2', '\x2', 'J', '\x39', '\x3', '\x2', 
		'\x2', '\x2', 'J', '<', '\x3', '\x2', '\x2', '\x2', 'J', '?', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x42', '\x3', '\x2', '\x2', '\x2', 'J', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'N', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', '\x3', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'O', 
		'W', '\x5', '\n', '\x6', '\x2', 'P', 'W', '\x5', '\x6', '\x4', '\x2', 
		'Q', 'W', '\x5', '\b', '\x5', '\x2', 'R', 'S', '\a', '\x1E', '\x2', '\x2', 
		'S', 'T', '\x5', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\x1F', '\x2', '\x2', 
		'U', 'W', '\x3', '\x2', '\x2', '\x2', 'V', 'O', '\x3', '\x2', '\x2', '\x2', 
		'V', 'P', '\x3', '\x2', '\x2', '\x2', 'V', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'V', 'R', '\x3', '\x2', '\x2', '\x2', 'W', '\x5', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Y', '\a', ' ', '\x2', '\x2', 'Y', '\x61', '\a', '!', '\x2', 
		'\x2', 'Z', '\x61', '\t', '\n', '\x2', '\x2', '[', '\x61', '\a', ';', 
		'\x2', '\x2', '\\', '\x61', '\a', '<', '\x2', '\x2', ']', '\x61', '\a', 
		'\x37', '\x2', '\x2', '^', '\x61', '\a', '\x38', '\x2', '\x2', '_', '\x61', 
		'\x5', '\x10', '\t', '\x2', '`', 'X', '\x3', '\x2', '\x2', '\x2', '`', 
		'Z', '\x3', '\x2', '\x2', '\x2', '`', '[', '\x3', '\x2', '\x2', '\x2', 
		'`', '\\', '\x3', '\x2', '\x2', '\x2', '`', ']', '\x3', '\x2', '\x2', 
		'\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\a', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\a', 
		'$', '\x2', '\x2', '\x63', '\x64', '\x5', '\x1C', '\xF', '\x2', '\x64', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x65', 'i', '\x5', '\x1C', '\xF', '\x2', 
		'\x66', 'i', '\x5', '\f', '\a', '\x2', 'g', 'i', '\a', '%', '\x2', '\x2', 
		'h', '\x65', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'k', '\x5', '\x1C', '\xF', '\x2', 'k', 'm', '\a', '\x1E', 
		'\x2', '\x2', 'l', 'n', '\x5', '\xE', '\b', '\x2', 'm', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\a', '\x1F', '\x2', '\x2', 'p', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'v', '\x5', '\x2', '\x2', '\x2', 'r', 's', '\a', 
		'&', '\x2', '\x2', 's', 'u', '\x5', '\x2', '\x2', '\x2', 't', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'u', 'x', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', 
		'{', '\a', '<', '\x2', '\x2', 'z', '|', '\x5', '\x12', '\n', '\x2', '{', 
		'z', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x11', '\x3', '\x2', '\x2', '\x2', '}', '\x81', '\x5', '\x14', '\v', 
		'\x2', '~', '\x81', '\x5', '\x16', '\f', '\x2', '\x7F', '\x81', '\a', 
		';', '\x2', '\x2', '\x80', '}', '\x3', '\x2', '\x2', '\x2', '\x80', '~', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x13', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\t', '\v', 
		'\x2', '\x2', '\x83', '\x15', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', 
		'\t', '\f', '\x2', '\x2', '\x85', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x87', '\x5', '\x1A', '\xE', '\x2', '\x87', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x8D', '\x5', '\x1C', '\xF', '\x2', '\x89', '\x8A', 
		'\a', '\x3', '\x2', '\x2', '\x8A', '\x8C', '\x5', '\x1C', '\xF', '\x2', 
		'\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\t', '\r', 
		'\x2', '\x2', '\x91', '\x1D', '\x3', '\x2', '\x2', '\x2', '\r', '\"', 
		'J', 'L', 'V', '`', 'h', 'm', 'v', '{', '\x80', '\x8D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
